Добавить настройки подключения клиента:
• timeout (int| float, необязательно):
Тайм-аут в секундах, который будет использоваться при подключении. Это не тайм-аут, который будет использоваться при awaitвызове запросов, и для этого следует использовать asyncio.waitили asyncio.wait_for.
• request_retries (int| None, необязательно):
Сколько раз следует повторить запрос. Запросы повторяются, когда у Telegram возникают внутренние проблемы (из-за errors.ServerError или errors.RpcCallFailError), когда меньше errors.FloodWaitError или flood_sleep_threshold когда возникает ошибка миграции.
Может принимать отрицательное или Noneзначение для бесконечных повторных попыток, но это не рекомендуется, поскольку некоторые запросы всегда могут привести к сбою вызова (например, поиск сообщений).
• connection_retries (int| None, необязательно):
Сколько раз должно быть повторено повторное подключение, либо при первоначальном подключении, либо когда Telegram отключает нас. Может быть установлено отрицательное или Noneзначение для бесконечных повторов, но это не рекомендуется, так как программа может застрять в бесконечном цикле.
• retry_delay ( int| float, необязательно):
Задержка в секундах для перехода в спящий режим между автоматическими повторными подключениями.
• auto_reconnect ( bool, необязательно):
Следует ли connection_retries автоматически повторять попытки повторного подключения, если Telegram отключит нас или нет.
• sequential_updates (bool, необязательно):
По умолчанию каждое входящее обновление создаст новую задачу, поэтому вы можете обрабатывать несколько обновлений параллельно. Некоторым скриптам необходимо, чтобы порядок обработки обновлений был последовательным, и эта настройка позволяет им это сделать.
Если установлено значение True, входящие обновления будут помещены в очередь и обработаны последовательно. Это означает, что ваши обработчики событий не должны выполнять длительные операции, поскольку новые обновления помещаются в неограниченную очередь.
• flood_sleep_threshold (int| float, необязательно):
Порог, ниже которого библиотека должна автоматически засыпать при ошибках ожидания потока и ожидания медленного режима (включительно). Например, если FloodWaitError происходит для 17 с и flood_sleep_threshold 20 с, библиотека sleepавтоматически. Если ошибка была для 21 с, она будет . Значения больше дня (например, ) будут изменены на день.raise FloodWaitErrorfloat('inf')
• device_model (str, необязательно):
«Модель устройства» для отправки при создании начального соединения. По умолчанию «PC (n)bit» получен из platform.uname().machine, или его прямое значение, если неизвестно.
• system_version (str, необязательно):
«Версия системы» будет отправлена при создании начального соединения. По умолчанию platform.uname().release все, что находится перед -, удалено.
• app_version (str, необязательно):
«Версия приложения» будет отправлена при создании начального соединения. По умолчанию telethon.version.version.
• lang_code (str, необязательно):
«Код языка» для отправки при создании начального соединения. По умолчанию 'en'.
• system_lang_code (str, необязательно):
«Код языка системы» для отправки при создании начального соединения. По умолчанию lang_code.

Добавь выбор предустановеленных настроек:
device_model: настоящие данные (выбор)
system_version: настоящие данные (выбор)
app_version: настоящие данные (выбор)
lang_code: ru (выбор)
system_lang_code: ru (выбор)
Официальные API ID и API Hash для Telegram

Для официальных приложений Telegram используются следующие API ID и API Hash:
Telegram для Android:

API ID: 4
API Hash: 014b35b6184100b085b0d0572f9b5103

Telegram для iOS:

API ID: 3
API Hash: 3e0cb5efcd52300aec5994fdfc5bdc16

Telegram Desktop:

API ID: 2040
API Hash: b18441a1ff607e10a989891a5462e627

Telegram macOS:

API ID: 2834
API Hash: 4b1488f110c6e15d8db8f8f7a58cddd7

Telegram Web-K (web.telegram.org/k/):

API ID: 2496
API Hash: 8da85b0d5bfe62527e5b244c209159c3

Telegram Web-Z (web.telegram.org/z/):

API ID: 7893
API Hash: 20a8f98d5edab2727394b99aae829d1a